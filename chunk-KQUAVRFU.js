import{a}from"./chunk-WXWXYMIB.js";import{u as i,v as u}from"./chunk-ISIAGV3U.js";import{U as l,Z as c}from"./chunk-7YWQNTIB.js";var n=class extends Error{};n.prototype.name="InvalidTokenError";function g(r){return decodeURIComponent(atob(r).replace(/(.)/g,(e,t)=>{let s=t.charCodeAt(0).toString(16).toUpperCase();return s.length<2&&(s="0"+s),"%"+s}))}function f(r){let e=r.replace(/-/g,"+").replace(/_/g,"/");switch(e.length%4){case 0:break;case 2:e+="==";break;case 3:e+="=";break;default:throw new Error("base64 string is not of the correct length")}try{return g(e)}catch{return atob(e)}}function d(r,e){if(typeof r!="string")throw new n("Invalid token specified: must be a string");e||(e={});let t=e.header===!0?0:1,s=r.split(".")[t];if(typeof s!="string")throw new n(`Invalid token specified: missing part #${t+1}`);let p;try{p=f(s)}catch(o){throw new n(`Invalid token specified: invalid base64 for part #${t+1} (${o.message})`)}try{return JSON.parse(p)}catch(o){throw new n(`Invalid token specified: invalid json for part #${t+1} (${o.message})`)}}var h=class r{constructor(e){this.http=e}tokenKey="UserToken";register(e){return this.http.post(a.apiUrl+"auth/signup",e)}login(e){return this.http.post(a.apiUrl+"auth/signin",e)}forgetPass(e){return this.http.post(a.apiUrl+"auth/forgotPasswords",e)}ResetCode(e){return this.http.post(a.apiUrl+"auth/verifyResetCode",e)}ResetPass(e){return this.http.put(a.apiUrl+"auth/resetPassword",e)}setToken(e,t=!1){t?localStorage.setItem(this.tokenKey,e):sessionStorage.setItem(this.tokenKey,e)}getuserData(){let e=this.getToken();if(!e)return null;try{return d(e)}catch{return null}}clearToken(){sessionStorage.removeItem(this.tokenKey),localStorage.removeItem(this.tokenKey)}getToken(){return sessionStorage.getItem(this.tokenKey)||localStorage.getItem(this.tokenKey)}isLoggedIn(){return this.getToken()!==null}UpdatePass(e){let t=this.getToken(),s=new i().set("token",t||"");return this.http.put(a.apiUrl+"users/changeMyPassword",e,{headers:s})}UpdateuserData(e){let t=this.getToken(),s=new i().set("token",t||"");return this.http.put(a.apiUrl+"users/updateMe/",e,{headers:s})}getuserid(){return this.getuserData().id||null}static \u0275fac=function(t){return new(t||r)(c(u))};static \u0275prov=l({token:r,factory:r.\u0275fac,providedIn:"root"})};export{h as a};
